import { AsyncResult } from '@catalogfi/utils';
import { EventBroker } from '@gardenfi/utils';

export type Secret = {
  secretHash: string;
  secret: string;
};

/**
 * Secret Manager Interface.
 * This interface is used to generate and retrieve secrets and secretHashes.
 * The secret is generated by hashing the signature and the secretHash is generated by hashing the secret.
 */
export interface ISecretManager extends EventBroker<SecretManagerEvents> {
  /**
   * Initializes the SecretManager with the wallet client.
   */
  initialize: () => AsyncResult<string, string>;
  /**
   * Generates a new master key.
   * If the master key already exists, it will return the existing master key.
   * Else, it will generate a new master key by hashing a signature generated by signing a message with the wallet client.
   * @returns Master key
   */
  getMasterDigestKey: () => AsyncResult<string, string>;

  /**
   * Generates secret and secretHash by signing the nonce.
   * Secret is generated by hashing the signature and secretHash is generated by hashing the secret.
   * @param nonce
   * @returns {AsyncResult<Secret, string>} secret,secretHash
   */
  generateSecret: (nonce: string) => AsyncResult<Secret, string>;

  /**
   * Checks if the SecretManager is initialized with a private key.
   * @returns boolean
   */
  readonly isInitialized: boolean;
}

export type SecretManagerEvents = {
  error: (error: string) => void;
  initialized: (init: boolean) => void;
};
